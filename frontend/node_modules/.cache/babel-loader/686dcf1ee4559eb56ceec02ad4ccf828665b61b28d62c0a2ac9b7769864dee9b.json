{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { CODEC_STRING } from \"./codec.js\";\n\n// storage events only work across tabs, we'll use an event emitter to announce within the current tab\nconst currentTabChangeListeners = new Map();\nfunction onCurrentTabStorageChange(key, handler) {\n  let listeners = currentTabChangeListeners.get(key);\n  if (!listeners) {\n    listeners = new Set();\n    currentTabChangeListeners.set(key, listeners);\n  }\n  listeners.add(handler);\n}\nfunction offCurrentTabStorageChange(key, handler) {\n  const listeners = currentTabChangeListeners.get(key);\n  if (!listeners) {\n    return;\n  }\n  listeners.delete(handler);\n  if (listeners.size === 0) {\n    currentTabChangeListeners.delete(key);\n  }\n}\nfunction emitCurrentTabStorageChange(key) {\n  const listeners = currentTabChangeListeners.get(key);\n  if (listeners) {\n    listeners.forEach(listener => listener());\n  }\n}\nif (typeof window !== 'undefined') {\n  const origSetItem = window.localStorage.setItem;\n  window.localStorage.setItem = function setItem(key, value) {\n    const result = origSetItem.call(this, key, value);\n    emitCurrentTabStorageChange(key);\n    return result;\n  };\n}\nfunction subscribe(area, key, callback) {\n  if (!key) {\n    return () => {};\n  }\n  const storageHandler = event => {\n    if (event.storageArea === area && event.key === key) {\n      callback();\n    }\n  };\n  window.addEventListener('storage', storageHandler);\n  onCurrentTabStorageChange(key, callback);\n  return () => {\n    window.removeEventListener('storage', storageHandler);\n    offCurrentTabStorageChange(key, callback);\n  };\n}\nfunction getSnapshot(area, key) {\n  if (!key) {\n    return null;\n  }\n  try {\n    return area.getItem(key);\n  } catch {\n    // ignore\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#feature-detecting_localstorage\n    return null;\n  }\n}\nfunction setValue(area, key, value) {\n  if (!key) {\n    return;\n  }\n  try {\n    if (value === null) {\n      area.removeItem(key);\n    } else {\n      area.setItem(key, String(value));\n    }\n  } catch {\n    // ignore\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#feature-detecting_localstorage\n    return;\n  }\n  emitCurrentTabStorageChange(key);\n}\nconst serverValue = [null, () => {}];\nexport function useStorageStateServer() {\n  return serverValue;\n}\nfunction encode(codec, value) {\n  return value === null ? null : codec.stringify(value);\n}\nfunction decode(codec, value) {\n  return value === null ? null : codec.parse(value);\n}\n\n// Start with null for the hydration, and then switch to the actual value.\nconst getKeyServerSnapshot = () => null;\n\n/**\n * Sync state to local storage so that it persists through a page refresh. Usage is\n * similar to useState except we pass in a storage key so that we can default\n * to that value on page load instead of the specified initial value.\n *\n * Since the storage API isn't available in server-rendering environments, we\n * return null during SSR and hydration.\n */\n\nexport function useStorageState(area, key, initializer = null, options) {\n  const codec = options?.codec ?? CODEC_STRING;\n  const [initialValue] = React.useState(initializer);\n  const encodedInitialValue = React.useMemo(() => encode(codec, initialValue), [codec, initialValue]);\n  const subscribeKey = React.useCallback(callback => subscribe(area, key, callback), [area, key]);\n  const getKeySnapshot = React.useCallback(() => getSnapshot(area, key) ?? encodedInitialValue, [area, encodedInitialValue, key]);\n  const encodedStoredValue = React.useSyncExternalStore(subscribeKey, getKeySnapshot, getKeyServerSnapshot);\n  const storedValue = React.useMemo(() => decode(codec, encodedStoredValue), [codec, encodedStoredValue]);\n  const setStoredValue = React.useCallback(value => {\n    const valueToStore = value instanceof Function ? value(storedValue) : value;\n    const encodedValueToStore = encode(codec, valueToStore);\n    setValue(area, key, encodedValueToStore);\n  }, [area, codec, storedValue, key]);\n  const [nonStoredValue, setNonStoredValue] = React.useState(initialValue);\n  if (!key) {\n    return [nonStoredValue, setNonStoredValue];\n  }\n  return [storedValue, setStoredValue];\n}","map":{"version":3,"names":["React","CODEC_STRING","currentTabChangeListeners","Map","onCurrentTabStorageChange","key","handler","listeners","get","Set","set","add","offCurrentTabStorageChange","delete","size","emitCurrentTabStorageChange","forEach","listener","window","origSetItem","localStorage","setItem","value","result","call","subscribe","area","callback","storageHandler","event","storageArea","addEventListener","removeEventListener","getSnapshot","getItem","setValue","removeItem","String","serverValue","useStorageStateServer","encode","codec","stringify","decode","parse","getKeyServerSnapshot","useStorageState","initializer","options","initialValue","useState","encodedInitialValue","useMemo","subscribeKey","useCallback","getKeySnapshot","encodedStoredValue","useSyncExternalStore","storedValue","setStoredValue","valueToStore","Function","encodedValueToStore","nonStoredValue","setNonStoredValue"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@toolpad/core/persistence/useStorageState.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { CODEC_STRING } from \"./codec.js\";\n\n// storage events only work across tabs, we'll use an event emitter to announce within the current tab\nconst currentTabChangeListeners = new Map();\nfunction onCurrentTabStorageChange(key, handler) {\n  let listeners = currentTabChangeListeners.get(key);\n  if (!listeners) {\n    listeners = new Set();\n    currentTabChangeListeners.set(key, listeners);\n  }\n  listeners.add(handler);\n}\nfunction offCurrentTabStorageChange(key, handler) {\n  const listeners = currentTabChangeListeners.get(key);\n  if (!listeners) {\n    return;\n  }\n  listeners.delete(handler);\n  if (listeners.size === 0) {\n    currentTabChangeListeners.delete(key);\n  }\n}\nfunction emitCurrentTabStorageChange(key) {\n  const listeners = currentTabChangeListeners.get(key);\n  if (listeners) {\n    listeners.forEach(listener => listener());\n  }\n}\nif (typeof window !== 'undefined') {\n  const origSetItem = window.localStorage.setItem;\n  window.localStorage.setItem = function setItem(key, value) {\n    const result = origSetItem.call(this, key, value);\n    emitCurrentTabStorageChange(key);\n    return result;\n  };\n}\nfunction subscribe(area, key, callback) {\n  if (!key) {\n    return () => {};\n  }\n  const storageHandler = event => {\n    if (event.storageArea === area && event.key === key) {\n      callback();\n    }\n  };\n  window.addEventListener('storage', storageHandler);\n  onCurrentTabStorageChange(key, callback);\n  return () => {\n    window.removeEventListener('storage', storageHandler);\n    offCurrentTabStorageChange(key, callback);\n  };\n}\nfunction getSnapshot(area, key) {\n  if (!key) {\n    return null;\n  }\n  try {\n    return area.getItem(key);\n  } catch {\n    // ignore\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#feature-detecting_localstorage\n    return null;\n  }\n}\nfunction setValue(area, key, value) {\n  if (!key) {\n    return;\n  }\n  try {\n    if (value === null) {\n      area.removeItem(key);\n    } else {\n      area.setItem(key, String(value));\n    }\n  } catch {\n    // ignore\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#feature-detecting_localstorage\n    return;\n  }\n  emitCurrentTabStorageChange(key);\n}\nconst serverValue = [null, () => {}];\nexport function useStorageStateServer() {\n  return serverValue;\n}\nfunction encode(codec, value) {\n  return value === null ? null : codec.stringify(value);\n}\nfunction decode(codec, value) {\n  return value === null ? null : codec.parse(value);\n}\n\n// Start with null for the hydration, and then switch to the actual value.\nconst getKeyServerSnapshot = () => null;\n\n/**\n * Sync state to local storage so that it persists through a page refresh. Usage is\n * similar to useState except we pass in a storage key so that we can default\n * to that value on page load instead of the specified initial value.\n *\n * Since the storage API isn't available in server-rendering environments, we\n * return null during SSR and hydration.\n */\n\nexport function useStorageState(area, key, initializer = null, options) {\n  const codec = options?.codec ?? CODEC_STRING;\n  const [initialValue] = React.useState(initializer);\n  const encodedInitialValue = React.useMemo(() => encode(codec, initialValue), [codec, initialValue]);\n  const subscribeKey = React.useCallback(callback => subscribe(area, key, callback), [area, key]);\n  const getKeySnapshot = React.useCallback(() => getSnapshot(area, key) ?? encodedInitialValue, [area, encodedInitialValue, key]);\n  const encodedStoredValue = React.useSyncExternalStore(subscribeKey, getKeySnapshot, getKeyServerSnapshot);\n  const storedValue = React.useMemo(() => decode(codec, encodedStoredValue), [codec, encodedStoredValue]);\n  const setStoredValue = React.useCallback(value => {\n    const valueToStore = value instanceof Function ? value(storedValue) : value;\n    const encodedValueToStore = encode(codec, valueToStore);\n    setValue(area, key, encodedValueToStore);\n  }, [area, codec, storedValue, key]);\n  const [nonStoredValue, setNonStoredValue] = React.useState(initialValue);\n  if (!key) {\n    return [nonStoredValue, setNonStoredValue];\n  }\n  return [storedValue, setStoredValue];\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,YAAY;;AAEzC;AACA,MAAMC,yBAAyB,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC3C,SAASC,yBAAyBA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC/C,IAAIC,SAAS,GAAGL,yBAAyB,CAACM,GAAG,CAACH,GAAG,CAAC;EAClD,IAAI,CAACE,SAAS,EAAE;IACdA,SAAS,GAAG,IAAIE,GAAG,CAAC,CAAC;IACrBP,yBAAyB,CAACQ,GAAG,CAACL,GAAG,EAAEE,SAAS,CAAC;EAC/C;EACAA,SAAS,CAACI,GAAG,CAACL,OAAO,CAAC;AACxB;AACA,SAASM,0BAA0BA,CAACP,GAAG,EAAEC,OAAO,EAAE;EAChD,MAAMC,SAAS,GAAGL,yBAAyB,CAACM,GAAG,CAACH,GAAG,CAAC;EACpD,IAAI,CAACE,SAAS,EAAE;IACd;EACF;EACAA,SAAS,CAACM,MAAM,CAACP,OAAO,CAAC;EACzB,IAAIC,SAAS,CAACO,IAAI,KAAK,CAAC,EAAE;IACxBZ,yBAAyB,CAACW,MAAM,CAACR,GAAG,CAAC;EACvC;AACF;AACA,SAASU,2BAA2BA,CAACV,GAAG,EAAE;EACxC,MAAME,SAAS,GAAGL,yBAAyB,CAACM,GAAG,CAACH,GAAG,CAAC;EACpD,IAAIE,SAAS,EAAE;IACbA,SAAS,CAACS,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC;EAC3C;AACF;AACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EACjC,MAAMC,WAAW,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO;EAC/CH,MAAM,CAACE,YAAY,CAACC,OAAO,GAAG,SAASA,OAAOA,CAAChB,GAAG,EAAEiB,KAAK,EAAE;IACzD,MAAMC,MAAM,GAAGJ,WAAW,CAACK,IAAI,CAAC,IAAI,EAAEnB,GAAG,EAAEiB,KAAK,CAAC;IACjDP,2BAA2B,CAACV,GAAG,CAAC;IAChC,OAAOkB,MAAM;EACf,CAAC;AACH;AACA,SAASE,SAASA,CAACC,IAAI,EAAErB,GAAG,EAAEsB,QAAQ,EAAE;EACtC,IAAI,CAACtB,GAAG,EAAE;IACR,OAAO,MAAM,CAAC,CAAC;EACjB;EACA,MAAMuB,cAAc,GAAGC,KAAK,IAAI;IAC9B,IAAIA,KAAK,CAACC,WAAW,KAAKJ,IAAI,IAAIG,KAAK,CAACxB,GAAG,KAAKA,GAAG,EAAE;MACnDsB,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC;EACDT,MAAM,CAACa,gBAAgB,CAAC,SAAS,EAAEH,cAAc,CAAC;EAClDxB,yBAAyB,CAACC,GAAG,EAAEsB,QAAQ,CAAC;EACxC,OAAO,MAAM;IACXT,MAAM,CAACc,mBAAmB,CAAC,SAAS,EAAEJ,cAAc,CAAC;IACrDhB,0BAA0B,CAACP,GAAG,EAAEsB,QAAQ,CAAC;EAC3C,CAAC;AACH;AACA,SAASM,WAAWA,CAACP,IAAI,EAAErB,GAAG,EAAE;EAC9B,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACA,IAAI;IACF,OAAOqB,IAAI,CAACQ,OAAO,CAAC7B,GAAG,CAAC;EAC1B,CAAC,CAAC,MAAM;IACN;IACA;IACA,OAAO,IAAI;EACb;AACF;AACA,SAAS8B,QAAQA,CAACT,IAAI,EAAErB,GAAG,EAAEiB,KAAK,EAAE;EAClC,IAAI,CAACjB,GAAG,EAAE;IACR;EACF;EACA,IAAI;IACF,IAAIiB,KAAK,KAAK,IAAI,EAAE;MAClBI,IAAI,CAACU,UAAU,CAAC/B,GAAG,CAAC;IACtB,CAAC,MAAM;MACLqB,IAAI,CAACL,OAAO,CAAChB,GAAG,EAAEgC,MAAM,CAACf,KAAK,CAAC,CAAC;IAClC;EACF,CAAC,CAAC,MAAM;IACN;IACA;IACA;EACF;EACAP,2BAA2B,CAACV,GAAG,CAAC;AAClC;AACA,MAAMiC,WAAW,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AACpC,OAAO,SAASC,qBAAqBA,CAAA,EAAG;EACtC,OAAOD,WAAW;AACpB;AACA,SAASE,MAAMA,CAACC,KAAK,EAAEnB,KAAK,EAAE;EAC5B,OAAOA,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGmB,KAAK,CAACC,SAAS,CAACpB,KAAK,CAAC;AACvD;AACA,SAASqB,MAAMA,CAACF,KAAK,EAAEnB,KAAK,EAAE;EAC5B,OAAOA,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGmB,KAAK,CAACG,KAAK,CAACtB,KAAK,CAAC;AACnD;;AAEA;AACA,MAAMuB,oBAAoB,GAAGA,CAAA,KAAM,IAAI;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAeA,CAACpB,IAAI,EAAErB,GAAG,EAAE0C,WAAW,GAAG,IAAI,EAAEC,OAAO,EAAE;EACtE,MAAMP,KAAK,GAAGO,OAAO,EAAEP,KAAK,IAAIxC,YAAY;EAC5C,MAAM,CAACgD,YAAY,CAAC,GAAGjD,KAAK,CAACkD,QAAQ,CAACH,WAAW,CAAC;EAClD,MAAMI,mBAAmB,GAAGnD,KAAK,CAACoD,OAAO,CAAC,MAAMZ,MAAM,CAACC,KAAK,EAAEQ,YAAY,CAAC,EAAE,CAACR,KAAK,EAAEQ,YAAY,CAAC,CAAC;EACnG,MAAMI,YAAY,GAAGrD,KAAK,CAACsD,WAAW,CAAC3B,QAAQ,IAAIF,SAAS,CAACC,IAAI,EAAErB,GAAG,EAAEsB,QAAQ,CAAC,EAAE,CAACD,IAAI,EAAErB,GAAG,CAAC,CAAC;EAC/F,MAAMkD,cAAc,GAAGvD,KAAK,CAACsD,WAAW,CAAC,MAAMrB,WAAW,CAACP,IAAI,EAAErB,GAAG,CAAC,IAAI8C,mBAAmB,EAAE,CAACzB,IAAI,EAAEyB,mBAAmB,EAAE9C,GAAG,CAAC,CAAC;EAC/H,MAAMmD,kBAAkB,GAAGxD,KAAK,CAACyD,oBAAoB,CAACJ,YAAY,EAAEE,cAAc,EAAEV,oBAAoB,CAAC;EACzG,MAAMa,WAAW,GAAG1D,KAAK,CAACoD,OAAO,CAAC,MAAMT,MAAM,CAACF,KAAK,EAAEe,kBAAkB,CAAC,EAAE,CAACf,KAAK,EAAEe,kBAAkB,CAAC,CAAC;EACvG,MAAMG,cAAc,GAAG3D,KAAK,CAACsD,WAAW,CAAChC,KAAK,IAAI;IAChD,MAAMsC,YAAY,GAAGtC,KAAK,YAAYuC,QAAQ,GAAGvC,KAAK,CAACoC,WAAW,CAAC,GAAGpC,KAAK;IAC3E,MAAMwC,mBAAmB,GAAGtB,MAAM,CAACC,KAAK,EAAEmB,YAAY,CAAC;IACvDzB,QAAQ,CAACT,IAAI,EAAErB,GAAG,EAAEyD,mBAAmB,CAAC;EAC1C,CAAC,EAAE,CAACpC,IAAI,EAAEe,KAAK,EAAEiB,WAAW,EAAErD,GAAG,CAAC,CAAC;EACnC,MAAM,CAAC0D,cAAc,EAAEC,iBAAiB,CAAC,GAAGhE,KAAK,CAACkD,QAAQ,CAACD,YAAY,CAAC;EACxE,IAAI,CAAC5C,GAAG,EAAE;IACR,OAAO,CAAC0D,cAAc,EAAEC,iBAAiB,CAAC;EAC5C;EACA,OAAO,CAACN,WAAW,EAAEC,cAAc,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}