{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  function CssVarsProvider(props) {\n    var _colorSchemes$restThe, _restThemeProp$palett, _restThemeProp$genera, _theme$generateStyleS;\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || initialTheme;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : ((_colorSchemes$restThe = colorSchemes[restThemeProp.defaultColorScheme]) === null || _colorSchemes$restThe === void 0 || (_colorSchemes$restThe = _colorSchemes$restThe.palette) === null || _colorSchemes$restThe === void 0 ? void 0 : _colorSchemes$restThe.mode) || ((_restThemeProp$palett = restThemeProp.palette) === null || _restThemeProp$palett === void 0 ? void 0 : _restThemeProp$palett.mode);\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    // `colorScheme` is undefined on the server and hydration phase\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = ((_restThemeProp$genera = restThemeProp.generateThemeVars) === null || _restThemeProp$genera === void 0 ? void 0 : _restThemeProp$genera.call(restThemeProp)) || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = {\n      ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    };\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    if (calculatedColorScheme) {\n      const scheme = colorSchemes[calculatedColorScheme];\n      if (scheme && typeof scheme === 'object') {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = {\n              ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n      }\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = \".%s\";\n        }\n        if (selector === 'data') {\n          rule = \"[data-%s]\";\n        }\n        if (selector !== null && selector !== void 0 && selector.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = \"[\".concat(selector, \"=\\\"%s\\\"]\");\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && (upperTheme === null || upperTheme === void 0 ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: ((_theme$generateStyleS = theme.generateStyleSheets) === null || _theme$generateStyleS === void 0 ? void 0 : _theme$generateStyleS.call(theme)) || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","CssVarsProvider","props","_colorSchemes$restThe","_restThemeProp$palett","_restThemeProp$genera","_theme$generateStyleS","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","colorSchemes","components","cssVarPrefix","restThemeProp","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","defaultMode","palette","stateMode","stateColorScheme","supportedColorSchemes","calculatedColorScheme","themeVars","generateThemeVars","call","vars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","useEffect","selector","rule","startsWith","includes","concat","classList","remove","map","substring","replace","add","matches","match","attr","value","removeAttribute","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","shouldGenerateStyleSheet","cssVariables","element","Fragment","styles","generateStyleSheets","Provider","propTypes","node","any","string","bool","object","getInitColorSchemeScript","params"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || initialTheme;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    // `colorScheme` is undefined on the server and hydration phase\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = {\n      ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    };\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    if (calculatedColorScheme) {\n      const scheme = colorSchemes[calculatedColorScheme];\n      if (scheme && typeof scheme === 'object') {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = {\n              ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n      }\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: theme.generateStyleSheets?.() || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,IAAIC,WAAW,QAAQ,sBAAsB;AAC9D,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,qBAAqB,IAAIC,gCAAgC,EAAEC,wBAAwB,QAAQ,mDAAmD;AACrJ,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,SAASC,GAAG,IAAIC,IAAI,EAAEC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AAC9D,OAAO,MAAMC,sBAAsB,GAAG,0JAA0J;AAChM,eAAe,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EACrD,MAAM;IACJC,OAAO;IACP;AACJ;AACA;AACA;AACA;AACA;IACIC,KAAK,EAAEC,YAAY,GAAG,CAAC,CAAC;IACxBC,cAAc,EAAEC,qBAAqB,GAAGb,wBAAwB;IAChEc,qBAAqB,EAAEC,4BAA4B,GAAGhB,gCAAgC;IACtFiB,yBAAyB,EAAEC,8BAA8B,GAAG,KAAK;IACjEC,kBAAkB;IAClBC;EACF,CAAC,GAAGX,OAAO;EACX,MAAMY,cAAc,GAAG;IACrBC,eAAe,EAAE,EAAE;IACnBC,WAAW,EAAEC,SAAS;IACtBC,eAAe,EAAED,SAAS;IAC1BE,gBAAgB,EAAEF,SAAS;IAC3BG,IAAI,EAAEH,SAAS;IACfI,cAAc,EAAEA,CAAA,KAAM,CAAC,CAAC;IACxBC,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAC;IACjBC,UAAU,EAAEN;EACd,CAAC;EACD,MAAMO,kBAAkB,GAAG,aAAatC,KAAK,CAACuC,aAAa,CAACR,SAAS,CAAC;EACtE,IAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCJ,kBAAkB,CAACK,WAAW,GAAG,oBAAoB;EACvD;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM5C,KAAK,CAAC6C,UAAU,CAACP,kBAAkB,CAAC,IAAIV,cAAc;EACnF,SAASkB,eAAeA,CAACC,KAAK,EAAE;IAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IAC9B,MAAM;MACJC,QAAQ;MACRlC,KAAK,EAAEmC,SAAS;MAChBjC,cAAc,GAAGC,qBAAqB;MACtCC,qBAAqB,GAAGC,4BAA4B;MACpDC,yBAAyB,GAAGC,8BAA8B;MAC1D6B,aAAa,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGxB,SAAS,GAAGwB,MAAM;MAClEC,YAAY,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAG1B,SAAS,GAAG0B,QAAQ;MACrEC,eAAe,GAAG,OAAOD,QAAQ,KAAK,WAAW,GAAG1B,SAAS,GAAG0B,QAAQ,CAACE,eAAe;MACxFC,oBAAoB,GAAG,KAAK;MAC5BC,2BAA2B,GAAG;IAChC,CAAC,GAAGd,KAAK;IACT,MAAMe,UAAU,GAAG9D,KAAK,CAAC+D,MAAM,CAAC,KAAK,CAAC;IACtC,MAAMC,UAAU,GAAG5D,WAAW,CAAC,CAAC;IAChC,MAAM6D,GAAG,GAAGjE,KAAK,CAAC6C,UAAU,CAACP,kBAAkB,CAAC;IAChD,MAAM4B,MAAM,GAAG,CAAC,CAACD,GAAG,IAAI,CAACL,oBAAoB;IAC7C,MAAMO,YAAY,GAAGnE,KAAK,CAACoE,OAAO,CAAC,MAAM;MACvC,IAAIf,SAAS,EAAE;QACb,OAAOA,SAAS;MAClB;MACA,OAAO,OAAOlC,YAAY,KAAK,UAAU,GAAGA,YAAY,CAAC,CAAC,GAAGA,YAAY;IAC3E,CAAC,EAAE,CAACkC,SAAS,CAAC,CAAC;IACf,MAAMgB,WAAW,GAAGF,YAAY,CAAClD,OAAO,CAAC;IACzC,MAAM;MACJqD,YAAY,GAAG,CAAC,CAAC;MACjBC,UAAU,GAAG,CAAC,CAAC;MACfC,YAAY;MACZ,GAAGC;IACL,CAAC,GAAGJ,WAAW,IAAIF,YAAY;IAC/B,MAAMO,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACO,MAAM,CAACC,CAAC,IAAI,CAAC,CAACR,YAAY,CAACQ,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC7F,MAAMlD,eAAe,GAAG7B,KAAK,CAACoE,OAAO,CAAC,MAAMM,kBAAkB,CAACM,KAAK,CAAC,GAAG,CAAC,EAAE,CAACN,kBAAkB,CAAC,CAAC;IAChG,MAAMO,uBAAuB,GAAG,OAAOvD,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACwD,KAAK;IACtH,MAAMC,sBAAsB,GAAG,OAAOzD,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAAC0D,IAAI;IACpH,MAAMC,WAAW,GAAGf,YAAY,CAACW,uBAAuB,CAAC,IAAIX,YAAY,CAACa,sBAAsB,CAAC,GAAG,QAAQ,GAAG,EAAAnC,qBAAA,GAAAsB,YAAY,CAACG,aAAa,CAAC/C,kBAAkB,CAAC,cAAAsB,qBAAA,gBAAAA,qBAAA,GAA9CA,qBAAA,CAAgDsC,OAAO,cAAAtC,qBAAA,uBAAvDA,qBAAA,CAAyDd,IAAI,OAAAe,qBAAA,GAAIwB,aAAa,CAACa,OAAO,cAAArC,qBAAA,uBAArBA,qBAAA,CAAuBf,IAAI;;IAE3M;IACA,MAAM;MACJA,IAAI,EAAEqD,SAAS;MACfnD,OAAO;MACPC,UAAU;MACVJ,gBAAgB;MAChBD,eAAe;MACfF,WAAW,EAAE0D,gBAAgB;MAC7BrD;IACF,CAAC,GAAG1B,qBAAqB,CAAC;MACxBgF,qBAAqB,EAAE5D,eAAe;MACtCoD,uBAAuB;MACvBE,sBAAsB;MACtB/D,cAAc;MACdE,qBAAqB;MACrB+D,WAAW;MACX/B;IACF,CAAC,CAAC;IACF,IAAIpB,IAAI,GAAGqD,SAAS;IACpB,IAAIzD,WAAW,GAAG0D,gBAAgB;IAClC,IAAItB,MAAM,EAAE;MACVhC,IAAI,GAAG+B,GAAG,CAAC/B,IAAI;MACfJ,WAAW,GAAGmC,GAAG,CAACnC,WAAW;IAC/B;;IAEA;IACA,MAAM4D,qBAAqB,GAAG5D,WAAW,IAAI2C,aAAa,CAAC/C,kBAAkB;;IAE7E;IACA,MAAMiE,SAAS,GAAG,EAAAzC,qBAAA,GAAAuB,aAAa,CAACmB,iBAAiB,cAAA1C,qBAAA,uBAA/BA,qBAAA,CAAA2C,IAAA,CAAApB,aAAkC,CAAC,KAAIA,aAAa,CAACqB,IAAI;;IAE3E;IACA,MAAM5E,KAAK,GAAG;MACZ,GAAGuD,aAAa;MAChBF,UAAU;MACVD,YAAY;MACZE,YAAY;MACZsB,IAAI,EAAEH;IACR,CAAC;IACD,IAAI,OAAOzE,KAAK,CAAC6E,eAAe,KAAK,UAAU,EAAE;MAC/C7E,KAAK,CAAC8E,OAAO,GAAG9E,KAAK,CAAC6E,eAAe,CAAC,CAAC;IACzC;;IAEA;IACA,IAAIL,qBAAqB,EAAE;MACzB,MAAMO,MAAM,GAAG3B,YAAY,CAACoB,qBAAqB,CAAC;MAClD,IAAIO,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QACxC;QACAtB,MAAM,CAACC,IAAI,CAACqB,MAAM,CAAC,CAACC,OAAO,CAACC,SAAS,IAAI;UACvC,IAAIF,MAAM,CAACE,SAAS,CAAC,IAAI,OAAOF,MAAM,CAACE,SAAS,CAAC,KAAK,QAAQ,EAAE;YAC9D;YACAjF,KAAK,CAACiF,SAAS,CAAC,GAAG;cACjB,GAAGjF,KAAK,CAACiF,SAAS,CAAC;cACnB,GAAGF,MAAM,CAACE,SAAS;YACrB,CAAC;UACH,CAAC,MAAM;YACLjF,KAAK,CAACiF,SAAS,CAAC,GAAGF,MAAM,CAACE,SAAS,CAAC;UACtC;QACF,CAAC,CAAC;MACJ;IACF;;IAEA;IACA;IACA,MAAMC,mBAAmB,GAAG3B,aAAa,CAAC2B,mBAAmB;IAC7DpG,KAAK,CAACqG,SAAS,CAAC,MAAM;MACpB,IAAIvE,WAAW,IAAI4B,eAAe,IAAI0C,mBAAmB,IAAIA,mBAAmB,KAAK,OAAO,EAAE;QAC5F,MAAME,QAAQ,GAAGF,mBAAmB;QACpC,IAAIG,IAAI,GAAGH,mBAAmB;QAC9B,IAAIE,QAAQ,KAAK,OAAO,EAAE;UACxBC,IAAI,QAAQ;QACd;QACA,IAAID,QAAQ,KAAK,MAAM,EAAE;UACvBC,IAAI,cAAc;QACpB;QACA,IAAID,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEE,UAAU,CAAC,OAAO,CAAC,IAAI,CAACF,QAAQ,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;UAC7D;UACAF,IAAI,OAAAG,MAAA,CAAOJ,QAAQ,aAAQ;QAC7B;QACA,IAAIC,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;UACxB9C,eAAe,CAACiD,SAAS,CAACC,MAAM,CAAC,GAAG/E,eAAe,CAACgF,GAAG,CAACZ,MAAM,IAAIM,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAEd,MAAM,CAAC,CAAC,CAAC;UAC3GvC,eAAe,CAACiD,SAAS,CAACK,GAAG,CAACT,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAEjF,WAAW,CAAC,CAAC;QAC7E,CAAC,MAAM;UACL,MAAMmF,OAAO,GAAGV,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAEjF,WAAW,CAAC,CAACoF,KAAK,CAAC,cAAc,CAAC;UACrE,IAAID,OAAO,EAAE;YACX,MAAM,CAACE,IAAI,EAAEC,KAAK,CAAC,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACjC,KAAK,CAAC,GAAG,CAAC;YAC3C,IAAI,CAACoC,KAAK,EAAE;cACV;cACA;cACAvF,eAAe,CAACqE,OAAO,CAACD,MAAM,IAAI;gBAChCvC,eAAe,CAAC2D,eAAe,CAACF,IAAI,CAACJ,OAAO,CAACjF,WAAW,EAAEmE,MAAM,CAAC,CAAC;cACpE,CAAC,CAAC;YACJ;YACAvC,eAAe,CAAC4D,YAAY,CAACH,IAAI,EAAEC,KAAK,GAAGA,KAAK,CAACL,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;UAC5E,CAAC,MAAM;YACLrD,eAAe,CAAC4D,YAAY,CAACf,IAAI,EAAEzE,WAAW,CAAC;UACjD;QACF;MACF;IACF,CAAC,EAAE,CAACA,WAAW,EAAEsE,mBAAmB,EAAE1C,eAAe,EAAE7B,eAAe,CAAC,CAAC;;IAExE;IACA;IACA7B,KAAK,CAACqG,SAAS,CAAC,MAAM;MACpB,IAAIkB,KAAK;MACT,IAAI/F,yBAAyB,IAAIsC,UAAU,CAAC0D,OAAO,IAAIhE,YAAY,EAAE;QACnE,MAAMiE,GAAG,GAAGjE,YAAY,CAACkE,aAAa,CAAC,OAAO,CAAC;QAC/CD,GAAG,CAACE,WAAW,CAACnE,YAAY,CAACoE,cAAc,CAAC9G,sBAAsB,CAAC,CAAC;QACpE0C,YAAY,CAACqE,IAAI,CAACF,WAAW,CAACF,GAAG,CAAC;;QAElC;QACA,CAAC,MAAMlE,MAAM,CAACuE,gBAAgB,CAACtE,YAAY,CAACuE,IAAI,CAAC,EAAE,CAAC;QACpDR,KAAK,GAAGS,UAAU,CAAC,MAAM;UACvBxE,YAAY,CAACqE,IAAI,CAACI,WAAW,CAACR,GAAG,CAAC;QACpC,CAAC,EAAE,CAAC,CAAC;MACP;MACA,OAAO,MAAM;QACXS,YAAY,CAACX,KAAK,CAAC;MACrB,CAAC;IACH,CAAC,EAAE,CAACzF,WAAW,EAAEN,yBAAyB,EAAEgC,YAAY,CAAC,CAAC;IAC1DxD,KAAK,CAACqG,SAAS,CAAC,MAAM;MACpBvC,UAAU,CAAC0D,OAAO,GAAG,IAAI;MACzB,OAAO,MAAM;QACX1D,UAAU,CAAC0D,OAAO,GAAG,KAAK;MAC5B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;IACN,MAAMW,YAAY,GAAGnI,KAAK,CAACoE,OAAO,CAAC,OAAO;MACxCvC,eAAe;MACfC,WAAW;MACXE,eAAe;MACfC,gBAAgB;MAChBC,IAAI;MACJC,cAAc;MACdC,OAAO;MACPC;IACF,CAAC,CAAC,EAAE,CAACR,eAAe,EAAEC,WAAW,EAAEE,eAAe,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,cAAc,EAAEC,OAAO,EAAEC,UAAU,CAAC,CAAC;IACjH,IAAI+F,wBAAwB,GAAG,IAAI;IACnC,IAAIvE,2BAA2B,IAAIY,aAAa,CAAC4D,YAAY,KAAK,KAAK,IAAInE,MAAM,IAAI,CAAAF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEQ,YAAY,MAAKA,YAAY,EAAE;MAC9H4D,wBAAwB,GAAG,KAAK;IAClC;IACA,MAAME,OAAO,GAAG,aAAazH,KAAK,CAACb,KAAK,CAACuI,QAAQ,EAAE;MACjDnF,QAAQ,EAAE,CAAC,aAAazC,IAAI,CAACN,aAAa,EAAE;QAC1CY,OAAO,EAAEoD,WAAW,GAAGpD,OAAO,GAAGc,SAAS;QAC1Cb,KAAK,EAAES,YAAY,GAAGA,YAAY,CAACT,KAAK,CAAC,GAAGA,KAAK;QACjDkC,QAAQ,EAAEA;MACZ,CAAC,CAAC,EAAEgF,wBAAwB,IAAI,aAAazH,IAAI,CAACT,YAAY,EAAE;QAC9DsI,MAAM,EAAE,EAAArF,qBAAA,GAAAjC,KAAK,CAACuH,mBAAmB,cAAAtF,qBAAA,uBAAzBA,qBAAA,CAAA0C,IAAA,CAAA3E,KAA4B,CAAC,KAAI;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAIgD,MAAM,EAAE;MACV,OAAOoE,OAAO;IAChB;IACA,OAAO,aAAa3H,IAAI,CAAC2B,kBAAkB,CAACoG,QAAQ,EAAE;MACpDtB,KAAK,EAAEe,YAAY;MACnB/E,QAAQ,EAAEkF;IACZ,CAAC,CAAC;EACJ;EACA9F,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGI,eAAe,CAAC6F,SAAS,GAAG;IAClE;AACJ;AACA;IACIvF,QAAQ,EAAEnD,SAAS,CAAC2I,IAAI;IACxB;AACJ;AACA;IACIlF,eAAe,EAAEzD,SAAS,CAAC4I,GAAG;IAC9B;AACJ;AACA;IACIvH,qBAAqB,EAAErB,SAAS,CAAC6I,MAAM;IACvC;AACJ;AACA;IACIlF,oBAAoB,EAAE3D,SAAS,CAAC8I,IAAI;IACpC;AACJ;AACA;AACA;AACA;IACIlF,2BAA2B,EAAE5D,SAAS,CAAC8I,IAAI;IAC3C;AACJ;AACA;IACIvH,yBAAyB,EAAEvB,SAAS,CAAC8I,IAAI;IACzC;AACJ;AACA;IACIvF,YAAY,EAAEvD,SAAS,CAAC4I,GAAG;IAC3B;AACJ;AACA;IACIzH,cAAc,EAAEnB,SAAS,CAAC6I,MAAM;IAChC;AACJ;AACA;AACA;IACIxF,aAAa,EAAErD,SAAS,CAAC4I,GAAG;IAC5B;AACJ;AACA;IACI3H,KAAK,EAAEjB,SAAS,CAAC+I;EACnB,CAAC,GAAG,KAAK,CAAC;EACV,MAAM/D,uBAAuB,GAAG,OAAOvD,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACwD,KAAK;EACtH,MAAMC,sBAAsB,GAAG,OAAOzD,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAAC0D,IAAI;EACpH,MAAM6D,wBAAwB,GAAGC,MAAM,IAAI5I,qBAAqB,CAAC;IAC/DgB,qBAAqB,EAAEC,4BAA4B;IACnD0D,uBAAuB;IACvBE,sBAAsB;IACtB/D,cAAc,EAAEC,qBAAqB;IACrC,GAAG6H;EACL,CAAC,CAAC;EACF,OAAO;IACLpG,eAAe;IACfF,cAAc;IACdqG;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}