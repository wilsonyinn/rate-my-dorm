{"ast":null,"code":"/**\n * A codec that can encode and decode values of type V to and from strings.\n * @typeParam V The type of values that can be encoded and decoded.\n */\n\n/**\n * A codec that can encode and decode Date objects to and from strings.\n */\nexport const CODEC_DATE = {\n  parse: value => new Date(value),\n  stringify: value => value.toISOString()\n};\n\n/**\n * A codec that can encode and decode Date objects to and from strings, but only the date part.\n */\nexport const CODEC_DATE_ONLY = {\n  parse: value => new Date(value),\n  stringify: value => value.toISOString().split('T')[0]\n};\n\n/**\n * A codec that can encode and decode numbers to and from strings.\n */\nexport const CODEC_NUMBER = {\n  parse: value => Number(value),\n  stringify: value => String(value)\n};\n\n/**\n * A codec that can encode and decode boolean values to and from strings.\n */\nexport const CODE_BOOLEAN = {\n  parse: value => value === 'true',\n  stringify: value => String(value)\n};\n\n/**\n * A codec that can encode and decode JSON values to and from strings.\n */\nexport const CODEC_JSON = {\n  parse: value => {\n    try {\n      return JSON.parse(value);\n    } catch {\n      return null;\n    }\n  },\n  stringify: value => JSON.stringify(value)\n};\n\n/**\n * A codec that can encode and decode JSON values to and from strings.\n * If the JSON value is invalid, parsing will fail.\n */\nexport const CODEC_JSON_STRICT = {\n  parse: value => JSON.parse(value),\n  stringify: value => JSON.stringify(value)\n};\n\n/**\n * A codec that can encode and decode strings to and from strings.\n */\nexport const CODEC_STRING = {\n  parse: value => value,\n  stringify: value => value\n};","map":{"version":3,"names":["CODEC_DATE","parse","value","Date","stringify","toISOString","CODEC_DATE_ONLY","split","CODEC_NUMBER","Number","String","CODE_BOOLEAN","CODEC_JSON","JSON","CODEC_JSON_STRICT","CODEC_STRING"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@toolpad/core/persistence/codec.js"],"sourcesContent":["/**\n * A codec that can encode and decode values of type V to and from strings.\n * @typeParam V The type of values that can be encoded and decoded.\n */\n\n/**\n * A codec that can encode and decode Date objects to and from strings.\n */\nexport const CODEC_DATE = {\n  parse: value => new Date(value),\n  stringify: value => value.toISOString()\n};\n\n/**\n * A codec that can encode and decode Date objects to and from strings, but only the date part.\n */\nexport const CODEC_DATE_ONLY = {\n  parse: value => new Date(value),\n  stringify: value => value.toISOString().split('T')[0]\n};\n\n/**\n * A codec that can encode and decode numbers to and from strings.\n */\nexport const CODEC_NUMBER = {\n  parse: value => Number(value),\n  stringify: value => String(value)\n};\n\n/**\n * A codec that can encode and decode boolean values to and from strings.\n */\nexport const CODE_BOOLEAN = {\n  parse: value => value === 'true',\n  stringify: value => String(value)\n};\n\n/**\n * A codec that can encode and decode JSON values to and from strings.\n */\nexport const CODEC_JSON = {\n  parse: value => {\n    try {\n      return JSON.parse(value);\n    } catch {\n      return null;\n    }\n  },\n  stringify: value => JSON.stringify(value)\n};\n\n/**\n * A codec that can encode and decode JSON values to and from strings.\n * If the JSON value is invalid, parsing will fail.\n */\nexport const CODEC_JSON_STRICT = {\n  parse: value => JSON.parse(value),\n  stringify: value => JSON.stringify(value)\n};\n\n/**\n * A codec that can encode and decode strings to and from strings.\n */\nexport const CODEC_STRING = {\n  parse: value => value,\n  stringify: value => value\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAG;EACxBC,KAAK,EAAEC,KAAK,IAAI,IAAIC,IAAI,CAACD,KAAK,CAAC;EAC/BE,SAAS,EAAEF,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BL,KAAK,EAAEC,KAAK,IAAI,IAAIC,IAAI,CAACD,KAAK,CAAC;EAC/BE,SAAS,EAAEF,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1BP,KAAK,EAAEC,KAAK,IAAIO,MAAM,CAACP,KAAK,CAAC;EAC7BE,SAAS,EAAEF,KAAK,IAAIQ,MAAM,CAACR,KAAK;AAClC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMS,YAAY,GAAG;EAC1BV,KAAK,EAAEC,KAAK,IAAIA,KAAK,KAAK,MAAM;EAChCE,SAAS,EAAEF,KAAK,IAAIQ,MAAM,CAACR,KAAK;AAClC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,UAAU,GAAG;EACxBX,KAAK,EAAEC,KAAK,IAAI;IACd,IAAI;MACF,OAAOW,IAAI,CAACZ,KAAK,CAACC,KAAK,CAAC;IAC1B,CAAC,CAAC,MAAM;MACN,OAAO,IAAI;IACb;EACF,CAAC;EACDE,SAAS,EAAEF,KAAK,IAAIW,IAAI,CAACT,SAAS,CAACF,KAAK;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMY,iBAAiB,GAAG;EAC/Bb,KAAK,EAAEC,KAAK,IAAIW,IAAI,CAACZ,KAAK,CAACC,KAAK,CAAC;EACjCE,SAAS,EAAEF,KAAK,IAAIW,IAAI,CAACT,SAAS,CAACF,KAAK;AAC1C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMa,YAAY,GAAG;EAC1Bd,KAAK,EAAEC,KAAK,IAAIA,KAAK;EACrBE,SAAS,EAAEF,KAAK,IAAIA;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}