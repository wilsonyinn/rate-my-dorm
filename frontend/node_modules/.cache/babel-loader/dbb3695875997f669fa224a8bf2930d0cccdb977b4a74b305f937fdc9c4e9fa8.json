{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useBadge } from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base-ui/react-badge/components-api/#badge)\n */\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  var _slots$root, _slots$badge;\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({\n    ...props,\n    max: maxProp\n  });\n  const ownerState = {\n    ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) !== null && _slots$root !== void 0 ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = (_slots$badge = slots.badge) !== null && _slots$badge !== void 0 ? _slots$badge : 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, {\n      ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Badge };","map":{"version":3,"names":["React","PropTypes","unstable_composeClasses","composeClasses","useBadge","getBadgeUtilityClass","useSlotProps","useClassNamesOverride","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","invisible","slots","root","badge","Badge","forwardRef","props","forwardedRef","_slots$root","_slots$badge","badgeContent","badgeContentProp","children","invisibleProp","max","maxProp","slotProps","showZero","other","displayValue","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","BadgeComponent","badgeProps","process","env","NODE_ENV","propTypes","node","bool","number","shape","oneOfType","func","object"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@mui/base/Badge/Badge.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useBadge } from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base-ui/react-badge/components-api/#badge)\n */\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, forwardedRef) {\n  const {\n    badgeContent: badgeContentProp,\n    children,\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    slotProps = {},\n    slots = {},\n    showZero = false,\n    ...other\n  } = props;\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge({\n    ...props,\n    max: maxProp\n  });\n  const ownerState = {\n    ...props,\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root ?? 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = slots.badge ?? 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, {\n      ...badgeProps,\n      children: displayValue\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { Badge };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}