{"ast":null,"code":"// src/react.tsx\nimport * as React from \"react\";\nimport * as ReactIs from \"react-is\";\nfunction interleave(items, separator) {\n  const result = [];\n  for (let i = 0; i < items.length; i += 1) {\n    if (i > 0) {\n      if (ReactIs.isElement(separator)) {\n        result.push(React.cloneElement(separator, {\n          key: \"separator-\".concat(i)\n        }));\n      } else {\n        result.push(separator);\n      }\n    }\n    const item = items[i];\n    result.push(item);\n  }\n  return /* @__PURE__ */React.createElement(React.Fragment, null, result);\n}\nfunction useNonNullableContext(context, name) {\n  const maybeContext = React.useContext(context);\n  if (maybeContext === null || maybeContext === void 0) {\n    throw new Error(\"context \\\"\".concat(name, \"\\\" was used without a Provider\"));\n  }\n  return maybeContext;\n}\nfunction createProvidedContext(name) {\n  const context = React.createContext(void 0);\n  const useContext2 = () => useNonNullableContext(context, name);\n  return [useContext2, context.Provider];\n}\nfunction useAssertedContext(context) {\n  const value = React.useContext(context);\n  if (value === void 0) {\n    throw new Error(\"context was used without a Provider\");\n  }\n  return value;\n}\nfunction useTraceUpdates(prefix, props) {\n  const prev = React.useRef(props);\n  React.useEffect(() => {\n    const changedProps = {};\n    for (const key of Object.keys(props)) {\n      if (!Object.is(prev.current[key], props[key])) {\n        changedProps[key] = props[key];\n      }\n    }\n    if (Object.keys(changedProps).length > 0) {\n      console.log(\"\".concat(prefix, \" changed props:\"), changedProps);\n    }\n    prev.current = props;\n  });\n}\nfunction getComponentDisplayName(Component) {\n  if (typeof Component === \"string\") {\n    return Component || \"Unknown\";\n  }\n  return Component.displayName || Component.name;\n}\nfunction createGlobalState(initialState) {\n  let state = initialState;\n  const listeners = [];\n  const subscribe = cb => {\n    listeners.push(cb);\n    return () => {\n      const index = listeners.indexOf(cb);\n      listeners.splice(index, 1);\n    };\n  };\n  const getState = () => state;\n  const setState = newState => {\n    state = typeof newState === \"function\" ? newState(state) : newState;\n    listeners.forEach(cb => cb(state));\n  };\n  const useValue = () => React.useSyncExternalStore(subscribe, getState, getState);\n  const useState = () => {\n    const value = useValue();\n    return [value, setState];\n  };\n  return {\n    getState,\n    setState,\n    useValue,\n    useState,\n    subscribe\n  };\n}\nexport { createGlobalState, createProvidedContext, getComponentDisplayName as default, interleave, useAssertedContext, useNonNullableContext, useTraceUpdates };","map":{"version":3,"names":["React","ReactIs","interleave","items","separator","result","i","length","isElement","push","cloneElement","key","concat","item","createElement","Fragment","useNonNullableContext","context","name","maybeContext","useContext","Error","createProvidedContext","createContext","useContext2","Provider","useAssertedContext","value","useTraceUpdates","prefix","props","prev","useRef","useEffect","changedProps","Object","keys","is","current","console","log","getComponentDisplayName","Component","displayName","createGlobalState","initialState","state","listeners","subscribe","cb","index","indexOf","splice","getState","setState","newState","forEach","useValue","useSyncExternalStore","useState"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@toolpad/utils/src/react.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactIs from 'react-is';\n\n/**\n * Like `Array.prototype.join`, but for React nodes.\n */\nexport function interleave(items: React.ReactNode[], separator: React.ReactNode): React.ReactNode {\n  const result: React.ReactNode[] = [];\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (i > 0) {\n      if (ReactIs.isElement(separator)) {\n        result.push(React.cloneElement(separator, { key: `separator-${i}` }));\n      } else {\n        result.push(separator);\n      }\n    }\n\n    const item = items[i];\n    result.push(item);\n  }\n\n  return <React.Fragment>{result}</React.Fragment>;\n}\n\n/**\n * Consume a context but throw when used outside of a provider.\n */\nexport function useNonNullableContext<T>(context: React.Context<T>, name?: string): NonNullable<T> {\n  const maybeContext = React.useContext(context);\n  if (maybeContext === null || maybeContext === undefined) {\n    throw new Error(`context \"${name}\" was used without a Provider`);\n  }\n  return maybeContext;\n}\n\n/**\n * Context that throws when used outside of a provider.\n */\nexport function createProvidedContext<T>(\n  name?: string,\n): [() => T, React.ComponentType<React.ProviderProps<T>>] {\n  const context = React.createContext<T | undefined>(undefined);\n  const useContext = () => useNonNullableContext(context, name);\n  return [useContext, context.Provider as React.ComponentType<React.ProviderProps<T>>];\n}\n\nexport function useAssertedContext<T>(context: React.Context<T | undefined>): T {\n  const value = React.useContext(context);\n  if (value === undefined) {\n    throw new Error('context was used without a Provider');\n  }\n  return value;\n}\n\n/**\n * Debugging tool that logs updates to props.\n */\nexport function useTraceUpdates<P extends object>(prefix: string, props: P) {\n  const prev = React.useRef<P>(props);\n  React.useEffect(() => {\n    const changedProps: Partial<P> = {};\n\n    for (const key of Object.keys(props) as (keyof P)[]) {\n      if (!Object.is(prev.current[key], props[key])) {\n        changedProps[key] = props[key];\n      }\n    }\n\n    if (Object.keys(changedProps).length > 0) {\n      // eslint-disable-next-line no-console\n      console.log(`${prefix} changed props:`, changedProps);\n    }\n\n    prev.current = props;\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function getComponentDisplayName(Component: React.ComponentType<any> | string) {\n  if (typeof Component === 'string') {\n    return Component || 'Unknown';\n  }\n\n  return Component.displayName || Component.name;\n}\n\n/**\n * Create a shared state to be used across the application. Returns a useState hook that\n * is synchronized on the same state between all instances where it is called.\n */\nexport function createGlobalState<T>(initialState: T) {\n  let state = initialState;\n  const listeners: Array<(state: T) => void> = [];\n\n  const subscribe = (cb: (state: T) => void) => {\n    listeners.push(cb);\n    return () => {\n      const index = listeners.indexOf(cb);\n      listeners.splice(index, 1);\n    };\n  };\n\n  const getState = () => state;\n\n  const setState = (newState: T | ((oldValue: T) => T)) => {\n    state = typeof newState === 'function' ? (newState as Function)(state) : newState;\n    listeners.forEach((cb) => cb(state));\n  };\n\n  const useValue = () => React.useSyncExternalStore(subscribe, getState, getState);\n\n  const useState = (): [T, React.Dispatch<React.SetStateAction<T>>] => {\n    const value = useValue();\n    return [value, setState];\n  };\n\n  return {\n    getState,\n    setState,\n    useValue,\n    useState,\n    subscribe,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}