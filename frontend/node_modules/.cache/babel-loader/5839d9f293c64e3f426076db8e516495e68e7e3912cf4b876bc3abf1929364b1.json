{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { menuReducer } from './menuReducer';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { ListActionTypes, useList } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { useCompoundParent } from '../useCompound';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\nexport function useMenu() {\n  var _useId, _React$useContext;\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false,\n    autoFocus = true,\n    componentName = 'useMenu'\n  } = parameters;\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = (_useId = useId(idParam)) !== null && _useId !== void 0 ? _useId : '';\n  const {\n    state: {\n      open,\n      changeReason\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = (_React$useContext = React.useContext(DropdownContext)) !== null && _React$useContext !== void 0 ? _React$useContext : FALLBACK_MENU_CONTEXT;\n\n  // store the initial open state to prevent focus stealing\n  // (the first menu items gets focued only when the menu is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) === null || _subitems$get === void 0 ? void 0 : _subitems$get.ref.current) !== null && _subitems$get$ref$cur !== void 0 ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isItemDisabled = React.useCallback(id => {\n    var _subitems$get2;\n    return (subitems === null || subitems === void 0 || (_subitems$get2 = subitems.get(id)) === null || _subitems$get2 === void 0 ? void 0 : _subitems$get2.disabled) || false;\n  }, [subitems]);\n  const getItemAsString = React.useCallback(id => {\n    var _subitems$get3, _subitems$get4;\n    return ((_subitems$get3 = subitems.get(id)) === null || _subitems$get3 === void 0 ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) === null || _subitems$get4 === void 0 || (_subitems$get4 = _subitems$get4.ref.current) === null || _subitems$get4 === void 0 ? void 0 : _subitems$get4.innerText);\n  }, [subitems]);\n  const reducerActionContext = React.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: 'none',\n    stateReducer: menuReducer,\n    componentName\n  });\n  useEnhancedEffect(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  useEnhancedEffect(() => {\n    if (open && (changeReason === null || changeReason === void 0 ? void 0 : changeReason.type) === 'keydown' && changeReason.key === 'ArrowUp') {\n      listDispatch({\n        type: ListActionTypes.highlightLast,\n        event: changeReason\n      });\n    }\n  }, [open, changeReason, listDispatch]);\n  React.useEffect(() => {\n    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {\n      var _subitems$get5;\n      (_subitems$get5 = subitems.get(highlightedValue)) === null || _subitems$get5 === void 0 || (_subitems$get5 = _subitems$get5.ref) === null || _subitems$get5 === void 0 || (_subitems$get5 = _subitems$get5.current) === null || _subitems$get5 === void 0 || _subitems$get5.focus();\n    }\n  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(() => {\n    var _rootRef$current;\n    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n    if ((_rootRef$current = rootRef.current) !== null && _rootRef$current !== void 0 && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {\n      var _subitems$get6;\n      subitems === null || subitems === void 0 || (_subitems$get6 = subitems.get(highlightedValue)) === null || _subitems$get6 === void 0 || (_subitems$get6 = _subitems$get6.ref.current) === null || _subitems$get6 === void 0 || _subitems$get6.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const createHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _rootRef$current2;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) === null || _otherHandlers$onBlur === void 0 || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_rootRef$current2 = rootRef.current) !== null && _rootRef$current2 !== void 0 && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) === null || _otherHandlers$onKeyD === void 0 || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'Escape') {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n  const getOwnListboxHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n  const getListboxProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id: listboxId,\n      role: 'menu'\n    };\n  };\n  React.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: {\n      ...compoundComponentContextValue,\n      ...listContextValue\n    },\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}","map":{"version":3,"names":["React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","menuReducer","DropdownContext","ListActionTypes","useList","DropdownActionTypes","useCompoundParent","combineHooksSlotProps","extractEventHandlers","FALLBACK_MENU_CONTEXT","dispatch","popupId","registerPopup","registerTrigger","state","open","changeReason","triggerElement","useMenu","_useId","_React$useContext","parameters","arguments","length","undefined","listboxRef","listboxRefProp","onItemsChange","id","idParam","disabledItemsFocusable","disableListWrap","autoFocus","componentName","rootRef","useRef","handleRef","listboxId","menuDispatch","useContext","isInitiallyOpen","subitems","contextValue","compoundComponentContextValue","subitemKeys","useMemo","Array","from","keys","getItemDomElement","useCallback","itemId","_subitems$get$ref$cur","_subitems$get","get","ref","current","isItemDisabled","_subitems$get2","disabled","getItemAsString","_subitems$get3","_subitems$get4","label","innerText","reducerActionContext","listDispatch","getRootProps","getListRootProps","listContextValue","highlightedValue","mergedListRef","focusManagement","getInitialState","selectedValues","items","selectionMode","stateReducer","type","key","highlightLast","event","useEffect","_subitems$get5","focus","_rootRef$current","contains","document","activeElement","_subitems$get6","createHandleBlur","otherHandlers","_otherHandlers$onBlur","_rootRef$current2","onBlur","call","defaultMuiPrevented","relatedTarget","blur","createHandleKeyDown","_otherHandlers$onKeyD","onKeyDown","escapeKeyDown","getOwnListboxHandlers","getListboxProps","externalProps","getCombinedRootProps","externalEventHandlers","role","useDebugValue","menuItems"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@mui/base/useMenu/useMenu.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { menuReducer } from './menuReducer';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { ListActionTypes, useList } from '../useList';\nimport { DropdownActionTypes } from '../useDropdown';\nimport { useCompoundParent } from '../useCompound';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nconst FALLBACK_MENU_CONTEXT = {\n  dispatch: () => {},\n  popupId: '',\n  registerPopup: () => {},\n  registerTrigger: () => {},\n  state: {\n    open: true,\n    changeReason: null\n  },\n  triggerElement: null\n};\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://next.mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://next.mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\nexport function useMenu(parameters = {}) {\n  const {\n    listboxRef: listboxRefProp,\n    onItemsChange,\n    id: idParam,\n    disabledItemsFocusable = true,\n    disableListWrap = false,\n    autoFocus = true,\n    componentName = 'useMenu'\n  } = parameters;\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(rootRef, listboxRefProp);\n  const listboxId = useId(idParam) ?? '';\n  const {\n    state: {\n      open,\n      changeReason\n    },\n    dispatch: menuDispatch,\n    triggerElement,\n    registerPopup\n  } = React.useContext(DropdownContext) ?? FALLBACK_MENU_CONTEXT;\n\n  // store the initial open state to prevent focus stealing\n  // (the first menu items gets focued only when the menu is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const isItemDisabled = React.useCallback(id => subitems?.get(id)?.disabled || false, [subitems]);\n  const getItemAsString = React.useCallback(id => subitems.get(id)?.label || subitems.get(id)?.ref.current?.innerText, [subitems]);\n  const reducerActionContext = React.useMemo(() => ({\n    listboxRef: rootRef\n  }), [rootRef]);\n  const {\n    dispatch: listDispatch,\n    getRootProps: getListRootProps,\n    contextValue: listContextValue,\n    state: {\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    disabledItemsFocusable,\n    disableListWrap,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null\n    }),\n    isItemDisabled,\n    items: subitemKeys,\n    getItemAsString,\n    rootRef: handleRef,\n    onItemsChange,\n    reducerActionContext,\n    selectionMode: 'none',\n    stateReducer: menuReducer,\n    componentName\n  });\n  useEnhancedEffect(() => {\n    registerPopup(listboxId);\n  }, [listboxId, registerPopup]);\n  useEnhancedEffect(() => {\n    if (open && changeReason?.type === 'keydown' && changeReason.key === 'ArrowUp') {\n      listDispatch({\n        type: ListActionTypes.highlightLast,\n        event: changeReason\n      });\n    }\n  }, [open, changeReason, listDispatch]);\n  React.useEffect(() => {\n    if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {\n      subitems.get(highlightedValue)?.ref?.current?.focus();\n    }\n  }, [open, autoFocus, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(() => {\n    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n    if (rootRef.current?.contains(document.activeElement) && highlightedValue !== null) {\n      subitems?.get(highlightedValue)?.ref.current?.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const createHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (rootRef.current?.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {\n      return;\n    }\n    menuDispatch({\n      type: DropdownActionTypes.blur,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'Escape') {\n      menuDispatch({\n        type: DropdownActionTypes.escapeKeyDown,\n        event\n      });\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createHandleBlur(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return {\n      ...externalProps,\n      ...externalEventHandlers,\n      ...getCombinedRootProps(externalEventHandlers),\n      id: listboxId,\n      role: 'menu'\n    };\n  };\n  React.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: {\n      ...compoundComponentContextValue,\n      ...listContextValue\n    },\n    dispatch: listDispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open,\n    triggerElement\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}