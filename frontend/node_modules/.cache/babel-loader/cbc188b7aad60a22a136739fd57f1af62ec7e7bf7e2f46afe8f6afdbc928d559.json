{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useSwitch } from '../useSwitch';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],\n    thumb: ['thumb'],\n    input: ['input'],\n    track: ['track']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\n\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base-ui/react-switch/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/base-ui/react-switch/components-api/#switch)\n */\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {\n  var _slots$root, _slots$thumb, _slots$input, _slots$track;\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp,\n    required,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(props);\n  const ownerState = {\n    ...props,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) !== null && _slots$root !== void 0 ? _slots$root : 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = (_slots$thumb = slots.thumb) !== null && _slots$thumb !== void 0 ? _slots$thumb : 'span';\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input = (_slots$input = slots.input) !== null && _slots$input !== void 0 ? _slots$input : 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : (_slots$track = slots.track) !== null && _slots$track !== void 0 ? _slots$track : 'span';\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [/*#__PURE__*/_jsx(Track, {\n      ...trackProps\n    }), /*#__PURE__*/_jsx(Thumb, {\n      ...thumbProps\n    }), /*#__PURE__*/_jsx(Input, {\n      ...inputProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  })\n} : void 0;\nexport { Switch };","map":{"version":3,"names":["React","PropTypes","unstable_composeClasses","composeClasses","useSwitch","useSlotProps","useClassNamesOverride","getSwitchUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","checked","disabled","focusVisible","readOnly","slots","root","thumb","input","track","Switch","forwardRef","props","forwardedRef","_slots$root","_slots$thumb","_slots$input","_slots$track","checkedProp","defaultChecked","disabledProp","onBlur","onChange","onFocus","onFocusVisible","readOnlyProp","required","slotProps","other","getInputProps","classes","Root","rootProps","elementType","externalSlotProps","externalForwardedProps","additionalProps","ref","className","Thumb","thumbProps","Input","inputProps","getSlotProps","Track","trackProps","children","process","env","NODE_ENV","propTypes","bool","string","func","shape","oneOfType","object","oneOf"],"sources":["/Users/wilson/Documents/rate-my-dorm/node_modules/@mui/base/Switch/Switch.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '../composeClasses';\nimport { useSwitch } from '../useSwitch';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],\n    thumb: ['thumb'],\n    input: ['input'],\n    track: ['track']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSwitchUtilityClass));\n};\n\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base-ui/react-switch/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/base-ui/react-switch/components-api/#switch)\n */\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp,\n    required,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getInputProps,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  } = useSwitch(props);\n  const ownerState = {\n    ...props,\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root ?? 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const Thumb = slots.thumb ?? 'span';\n  const thumbProps = useSlotProps({\n    elementType: Thumb,\n    externalSlotProps: slotProps.thumb,\n    ownerState,\n    className: classes.thumb\n  });\n  const Input = slots.input ?? 'input';\n  const inputProps = useSlotProps({\n    elementType: Input,\n    getSlotProps: getInputProps,\n    externalSlotProps: slotProps.input,\n    ownerState,\n    className: classes.input\n  });\n  const Track = slots.track === null ? () => null : slots.track ?? 'span';\n  const trackProps = useSlotProps({\n    elementType: Track,\n    externalSlotProps: slotProps.track,\n    ownerState,\n    className: classes.track\n  });\n  return /*#__PURE__*/_jsxs(Root, {\n    ...rootProps,\n    children: [/*#__PURE__*/_jsx(Track, {\n      ...trackProps\n    }), /*#__PURE__*/_jsx(Thumb, {\n      ...thumbProps\n    }), /*#__PURE__*/_jsx(Input, {\n      ...inputProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    thumb: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    track: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    thumb: PropTypes.elementType,\n    track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  })\n} : void 0;\nexport { Switch };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}